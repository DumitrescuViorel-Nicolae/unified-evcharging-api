-- Create table for EV stations
CREATE TABLE EVStations (
    id INT PRIMARY KEY IDENTITY(1,1),
    brand NVARCHAR(255),
    totalNumberOfConnectors INT,
    street NVARCHAR(255),
    city NVARCHAR(255),
    country NVARCHAR(255),
    phone NVARCHAR(20),
    website NVARCHAR(255),
    latitude DECIMAL(9,6),
    longitude DECIMAL(9,6),
    StripeAccountID VARCHAR(255),
    CompanyName NVARCHAR(255),
    CompanyId INT
);

-- Create table for connector details
CREATE TABLE ConnectorDetail (
    id INT PRIMARY KEY IDENTITY(1,1),
    evStationId INT,
    supplierName NVARCHAR(255),
    connectorType NVARCHAR(255),
    chargeCapacity NVARCHAR(255),
    maxPowerLevel INT,
    customerChargeLevel NVARCHAR(10),
    customerConnectorName NVARCHAR(255),
    pay BIT
);

-- Create table for connector status
CREATE TABLE ConnectorStatus (
    id INT PRIMARY KEY IDENTITY(1,1),
    connectorDetailsId INT,
    physicalReference NVARCHAR(10),
    state NVARCHAR(50)
);

-- Create table for payment methods
CREATE TABLE PaymentMethod (
    id INT PRIMARY KEY IDENTITY(1,1),
    evStationId INT,
    ePaymentAccept BIT,
    otherPaymentAccept BIT,
    ePaymentTypes NVARCHAR(MAX),
    otherPaymentTypes NVARCHAR(MAX)
);

-- Create table for payment transactions
CREATE TABLE PaymentTransactions (
    transaction_id VARCHAR(50) PRIMARY KEY,
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(3) NOT NULL,
    payment_method_brand VARCHAR(20),
    payment_method_last4 VARCHAR(4),
    status VARCHAR(20) NOT NULL,
    receipt_url VARCHAR(255),
    created_at DATETIME
);

-- Create table for registered companies
CREATE TABLE RegisteredCompanies (
    id INT PRIMARY KEY IDENTITY(1,1),
    UserId NVARCHAR(450) NOT NULL, -- Foreign key to AspNetUsers table
    CompanyName NVARCHAR(255) NOT NULL,
    StripeAccountID NVARCHAR(255),
    RegistrationNumber NVARCHAR(50),
    TaxNumber NVARCHAR(50),
    Country NVARCHAR(100),
    City NVARCHAR(100),
    StreetName NVARCHAR(255),
    ZipCode NVARCHAR(20),
    CONSTRAINT FK_RegisteredCompanies_AspNetUsers FOREIGN KEY (UserId) REFERENCES AspNetUsers(Id)
);

-- Create foreign key relationship between EVStations and RegisteredCompanies
ALTER TABLE EVStations
ADD CONSTRAINT FK_EVStations_RegisteredCompanies FOREIGN KEY (CompanyId) REFERENCES RegisteredCompanies(id);

-- Add indexes for performance
CREATE INDEX IX_RegisteredCompanies_UserId ON RegisteredCompanies(UserId);
CREATE INDEX IX_EVStations_CompanyId ON EVStations(CompanyId);


----------------------------------------------------------------------INSERTS-----------------------------------------------------------------------------------------------------------------

-- Insert a user (Assuming AspNetUsers table exists and user creation is managed by ASP.NET Identity)
DECLARE @userId NVARCHAR(450) = NEWID();
INSERT INTO AspNetUsers (Id, UserName, NormalizedUserName, Email, NormalizedEmail, EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp, PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled, LockoutEnd, LockoutEnabled, AccessFailedCount, Name)
VALUES (@userId, 'companyUser', 'COMPANYUSER', 'company@example.com', 'COMPANY@EXAMPLE.COM', 1, 'passwordHash', 'securityStamp', NEWID(), '1234567890', 1, 0, NULL, 1, 0, 'Company User');

-- Insert a company and link it to the user
DECLARE @companyId INT;
INSERT INTO RegisteredCompanies (UserId, CompanyName, StripeAccountID, RegistrationNumber, TaxNumber, Country, City, StreetName, ZipCode)
VALUES (@userId, 'Example Company', 'stripe_account_id', 'REG123456', 'TAX123456', 'USA', 'New York', '5th Avenue', '10001');
SET @companyId = SCOPE_IDENTITY();

-- Insert EV stations and link them to the newly created company
-- Insert entry 1
INSERT INTO EVStations (brand, totalNumberOfConnectors, street, city, country, phone, website, latitude, longitude, StripeAccountID, CompanyName, CompanyId)
VALUES ('E.ON', 4, 'Strada Batiștei', 'Bucharest', 'Romania', '+4980012189555', 'https://www.eon.com/en/private-customers/eon-drive.html', 44.4362, 26.0999, NULL, 'E.ON', @companyId);

DECLARE @stationId1 INT;
SET @stationId1 = SCOPE_IDENTITY();

INSERT INTO ConnectorDetail (evStationId, supplierName, connectorType, chargeCapacity, maxPowerLevel, customerChargeLevel, customerConnectorName, pay)
VALUES (@stationId1, 'E.ON', 'IEC 62196-2 type 2 (Mennekes)', '230-230VAC, 3-phase at max 32A', 22, '3', 'AC EV connector (Mennekes - type 2)', 1);

INSERT INTO ConnectorStatus (connectorDetailsId, physicalReference, state)
VALUES (SCOPE_IDENTITY(), '01010', 'AVAILABLE'),
       (SCOPE_IDENTITY(), '01010', 'OCCUPIED'),
       (SCOPE_IDENTITY(), '01015', 'OUT_OF_SERVICE'),
       (SCOPE_IDENTITY(), '01015', 'OUT_OF_SERVICE');

INSERT INTO PaymentMethod (evStationId, ePaymentAccept, otherPaymentAccept, ePaymentTypes, otherPaymentTypes)
VALUES (@stationId1, 1, 1, 'online-apple-pay, online-google-pay', 'rfid-reader, app, contactless-card, auth-by-car-plug-and-charge');

-- Insert entry 2
INSERT INTO EVStations (brand, totalNumberOfConnectors, street, city, country, phone, website, latitude, longitude, StripeAccountID, CompanyName, CompanyId)
VALUES ('Tesla Supercharger', 8, 'Bulevardul Lascăr Catargiu', 'Bucharest', 'Romania', '+40213161036', 'https://www.tesla.com/en_ro/supercharger', 44.4464, 26.0974, NULL, 'Tesla', @companyId);

DECLARE @stationId2 INT;
SET @stationId2 = SCOPE_IDENTITY();

INSERT INTO ConnectorDetail (evStationId, supplierName, connectorType, chargeCapacity, maxPowerLevel, customerChargeLevel, customerConnectorName, pay)
VALUES (@stationId2, 'Tesla', 'Tesla Supercharger', '480VAC, max 150kW', 150, '3', 'Supercharger', 1);

INSERT INTO ConnectorStatus (connectorDetailsId, physicalReference, state)
VALUES (SCOPE_IDENTITY(), '001', 'AVAILABLE'),
       (SCOPE_IDENTITY(), '002', 'AVAILABLE'),
       (SCOPE_IDENTITY(), '003', 'OUT_OF_SERVICE'),
       (SCOPE_IDENTITY(), '004', 'OCCUPIED'),
       (SCOPE_IDENTITY(), '005', 'AVAILABLE'),
       (SCOPE_IDENTITY(), '006', 'OUT_OF_SERVICE'),
       (SCOPE_IDENTITY(), '007', 'AVAILABLE'),
       (SCOPE_IDENTITY(), '008', 'AVAILABLE');

INSERT INTO PaymentMethod (evStationId, ePaymentAccept, otherPaymentAccept, ePaymentTypes, otherPaymentTypes)
VALUES (@stationId2, 0, 1, '', 'rfid-reader, app, contactless-card');

-- Insert entry 3
INSERT INTO EVStations (brand, totalNumberOfConnectors, street, city, country, phone, website, latitude, longitude, StripeAccountID, CompanyName, CompanyId)
VALUES ('IONITY', 6, 'Bulevardul Mihail Kogălniceanu', 'Bucharest', 'Romania', '+40215680364', 'https://ionity.eu/', 44.4406, 26.0975, NULL, 'IONITY', @companyId);

DECLARE @stationId3 INT;
SET @stationId3 = SCOPE_IDENTITY();

INSERT INTO ConnectorDetail (evStationId, supplierName, connectorType, chargeCapacity, maxPowerLevel, customerChargeLevel, customerConnectorName, pay)
VALUES (@stationId3, 'IONITY', 'CCS Combo 2', '400VDC, max 350kW', 350, '4', 'CCS Combo 2', 0);

INSERT INTO ConnectorStatus (connectorDetailsId, physicalReference, state)
VALUES (SCOPE_IDENTITY(), '001', 'AVAILABLE'),
       (SCOPE_IDENTITY(), '002', 'AVAILABLE'),
       (SCOPE_IDENTITY(), '003', 'OUT_OF_SERVICE'),
       (SCOPE_IDENTITY(), '004', 'OCCUPIED'),
       (SCOPE_IDENTITY(), '005', 'AVAILABLE'),
       (SCOPE_IDENTITY(), '006', 'OUT_OF_SERVICE');

INSERT INTO PaymentMethod (evStationId, ePaymentAccept, otherPaymentAccept, ePaymentTypes, otherPaymentTypes)
VALUES (@stationId3, 1, 0, 'online-apple-pay, online-google-pay', '');



{
  "stripeAccountID": "stripe123",
  "brand": "E.ON",
  "totalNumberOfConnectors": 4,
  "address": {
    "street": "Main Street",
    "city": "Anytown",
    "country": "USA"
  },
  "contacts": {
    "phone": "123-456-7890",
    "website": "https://www.example.com"
  },
  "position": {
    "latitude": 40.7128,
    "longitude": -74.0060
  },
  "connectorDetails": [
    {
      "supplierName": "ABC Inc.",
      "connectorType": "Type 2",
      "chargeCapacity": "230-230VAC, 3-phase at max 32A",
      "maxPowerLevel": 22,
      "customerChargeLevel": "Level 3",
      "customerConnectorName": "Type 2 Connector",
      "connectorsStatuses": [
        {
          "physicalReference": "A1",
          "state": "Available"
        },
        {
          "physicalReference": "B2",
          "state": "Occupied"
        }
      ]
    }
  ],
  "paymentMethods": {
    "ePayment": {
      "accept": true,
      "types": {
        "type": [
          "online-apple-pay",
          "online-google-pay"
        ]
      }
    },
    "other": {
      "accept": true,
      "types": {
        "type": [
          "rfid-reader",
          "app",
          "contactless-card",
          "auth-by-car-plug-and-charge"
        ]
      }
    }
  }
}
